---
description: 
globs: 
alwaysApply: false
---
# 藍圖組織指南

## 藍圖結構

每個藍圖應遵循以下結構：

```python
# __init__.py
blueprint = Blueprint('name', __name__, template_folder='../../templates/name')

# 導入路由
from .routes import *

# 導出藍圖
__all__ = ['blueprint']
```

## 主要藍圖

### 使用者藍圖
[services/user/user.py](mdc:services/user/user.py) 實現：
- 使用者認證
- 註冊功能
- 登入/登出
- 密碼重設
- 電子郵件驗證

### 日記藍圖
[services/diary/](mdc:services/diary) 處理：
- 日記創建
- 日記查看
- 日記編輯
- 日記 AI 互動

### 管理員藍圖
[services/admin/](mdc:services/admin) 提供：
- 使用者管理
- 系統監控
- 聊天管理
- 管理功能

### AI 聊天藍圖
[services/ai/](mdc:services/ai) 管理：
- AI 聊天會話
- 聊天歷史
- AI 回應處理

## 藍圖註冊

所有藍圖都在 [app.py](mdc:app.py) 中註冊，並設定各自的 URL 前綴：

```python
app.register_blueprint(user_bp, url_prefix="/user")
app.register_blueprint(diary_bp, url_prefix="/diary")
app.register_blueprint(admin_bp, url_prefix="/admin")
app.register_blueprint(ai_chat_bp, url_prefix="/ai")
```

## 重要注意事項

1. URL 前綴只應在 app.py 中的藍圖註冊時設定
2. 每個藍圖應有自己的模板資料夾
3. 藍圖應保持模組化和獨立性
4. 盡量減少藍圖之間的相互依賴



